middleware의 auth는 로그인 t/f 각각의 경우에 따른 리다이렉트 동작을 보조
mainRouter는 라우트 경로에 이 auth의 미들웨어 함수를 받아 리다이렉트(express.Router() 사용)
server.js는 '/'로 시작하는 경로에 mainRouter를 받아서 사용

유저모델.js는 
1. 유저 스키마(mongoose 모듈 사용)
2. salt를 이용한 비밀번호 해시 암호화 함수(bcrypt 모듈 사용), 
3. 유저가 비밀번호을 입력하면 db에 저장되어있는 해시된 암호화와 비교하는 함수형 메소드(bcrypt 모듈 사용)
이렇게 3개의 모델을 만들고

passport config에서는
1. 서버에서 세션을 만드는 것과 서버에서 desession하는 모델을 만든다.
2. 위의 유저모델과 passport 모듈을 이용하여 일반인증(local)과 구글인증방식을 생성한다.
3.유저라우터에서는 실제 유저가 로그인인증 절차를 밟을 때 어떻게 처리할지 passport.js를 임포트하여 
각 라우터에 post 메소드로 각각 로그인, 로그아웃 그리고 회원가입 그리고 구글 로그인 경우에 알맞는 동작 방식 생성
    3.1
    예를 들어. sendMail은 로그인, 로그아웃, 회원가입 진행할 때 사용되었다.
    이 sendMail은 (nodeMailer 모듈을 사용하였고 getEmailData 받아서 사용. 이 getEmailData는 welcome템플릿과 goodbye템플릿을 받아은 함수이다.)
    3.2 
    뷰 폴더에 있는 ejs 템플릿은 라우팅할 때 처맇한 템플릿이다. 
4. 서버.js는 '/auth' 라우터와 userRouter가 결합한 미들웨어를 만든다. 

